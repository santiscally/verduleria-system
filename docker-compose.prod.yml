version: '3.8'

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: verduleria_db
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: verduleria_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - verduleria-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: verduleria_backend
    restart: always
    env_file:
      - ./backend/.env.prod
    environment:
      DB_HOST: postgres
    networks:
      - verduleria-network
    depends_on:
      postgres:
        condition: service_healthy

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        NEXT_PUBLIC_API_URL: /api
    container_name: verduleria_frontend
    restart: always
    env_file:
      - ./frontend/.env.prod
    networks:
      - verduleria-network
    depends_on:
      - backend

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: verduleria_nginx
    restart: always
    ports:
      - "3000:80"
    volumes:
      - ./frontend/nginx.conf:/etc/nginx/conf.d/default.conf
    networks:
      - verduleria-network
    depends_on:
      - frontend
      - backend

networks:
  verduleria-network:
    driver: bridge

volumes:
  postgres_data: